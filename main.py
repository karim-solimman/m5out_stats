import openpyxl
import argparse
import os
if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Program to collect the output data from gem5 output file and combine it into excel file")
    parser.add_argument("--injectionrate",
                        help="Provide injectionrate", default=0.02)
    parser.add_argument(
        "--synthetic", help="Provide synthetic traffic because the different out format file", default="triba27_uniform_random")
    parser.add_argument(
        "--sim_cycles", help="Provide simulation clock cycles for simulation", default="5000000")
    args = parser.parse_args()

    assert (args.synthetic == "triba27_uniform_random" or args.synthetic ==
            "triba27_bit_reverse" or args.synthetic == "triba27_transpose" or args.synthetic == "triba27_tornado")

    # open the Excel file that will store the data
    work_book = openpyxl.load_workbook(
        "/home/soliman/m5out_stats/m5out_stats.xlsx")
    work_sheet = work_book["Sheet1"]

    # data list that will store the output values from gem5 simulator
    # begin the list with the injection rate
    data = [float(args.injectionrate)]
    # append the type of the synthetic traffic that being used
    data.append(args.synthetic)
    data.append(int(args.sim_cycles))
    # open the stats file that was generated by gem5
    print(os. getcwd())
    m5_file = open("/home/soliman/gem5_nxtspr/gem5/m5out/stats.txt")
    # m5_file = open("/home/soliman/gem5_original/gem5/m5out/stats.txt") #File for simulating mesh topology in original gem5

    if args.synthetic == "triba27_uniform_random":
        for line in m5_file:
            if "average_flit_latency" in line:
                print(line.split())
                data.append(float(line.split()[1]))
            if "average_flit_network_latency" in line:
                print(line.split())
                data.append(float(line.split()[1]))
            if "average_flit_queueing_latency" in line:
                print(line.split())
                data.append(float(line.split()[1]))
            if "average_flit_vnet_latency" in line:
                print(line.split())
                indexes = []
                for i in range(len(line)):
                    if line[i] == '|':
                        indexes.append(i)
                indexes.append(line.index('('))
                v1 = line[indexes[0] + 1:indexes[1] - 1]
                v2 = line[indexes[1] + 1:indexes[2] - 1]
                v3 = line[indexes[2] + 1:indexes[3] - 1]
                v1, v2, v3 = v1.strip(), v2.strip(), v3.strip()
                print(v1, v2, v3)
                avg = (float(v1) + float(v2) + float(v3)) / 3.0
                data.append(avg)
            if "average_packet_latency" in line:
                print(line.split())
                data.append(float(line.split()[1]))
            if "average_packet_network_latency" in line:
                print(line.split())
                data.append(float(line.split()[1]))
            if "average_packet_queueing_latency" in line:
                print(line.split())
                data.append(float(line.split()[1]))
            if "average_packet_vnet_latency" in line:
                print(line.split())
                indexes = []
                for i in range(len(line)):
                    if line[i] == '|':
                        indexes.append(i)
                indexes.append(line.index('('))
                v1 = line[indexes[0] + 1:indexes[1] - 1]
                v2 = line[indexes[1] + 1:indexes[2] - 1]
                v3 = line[indexes[2] + 1:indexes[3] - 1]
                v1, v2, v3 = v1.strip(), v2.strip(), v3.strip()
                print(v1, v2, v3)
                avg = (float(v1) + float(v2) + float(v3)) / 3.0
                data.append(avg)
            if "system.ruby.network.packets_injected::total" in line:
                print(line.split())
                data.append(float(line.split()[1]))
            if "system.ruby.network.packets_received::total" in line:
                print(line.split())
                data.append(float(line.split()[1]))
    elif args.synthetic == "triba27_bit_reverse":
        for line in m5_file:
            if "average_flit_latency" in line:
                print(line.split())
                data.append(float(line.split()[1]))
            if "average_flit_network_latency" in line:
                print(line.split())
                data.append(float(line.split()[1]))
            if "average_flit_queueing_latency" in line:
                print(line.split())
                data.append(float(line.split()[1]))
            if "average_flit_vnet_latency" in line:
                print(line.split())
                indexes = []
                for i in range(len(line)):
                    if line[i] == '|':
                        indexes.append(i)
                indexes.append(line.index('('))
                v1 = line[indexes[0] + 1:indexes[1] - 1]
                v2 = line[indexes[1] + 1:indexes[2] - 1]
                v3 = line[indexes[2] + 1:indexes[3] - 1]
                v1, v2, v3 = v1.strip(), v2.strip(), v3.strip()
                print(v1, v2, v3)
                avg = (float(v1) + float(v2) + float(v3)) / 3.0
                data.append(avg)
            if "average_packet_latency" in line:
                print(line.split())
                data.append(float(line.split()[1]))
            if "average_packet_network_latency" in line:
                print(line.split())
                data.append(float(line.split()[1]))
            if "average_packet_queueing_latency" in line:
                print(line.split())
                data.append(float(line.split()[1]))
            if "average_packet_vnet_latency" in line:
                print(line.split())
                print(line.split())
                indexes = []
                for i in range(len(line)):
                    if line[i] == '|':
                        indexes.append(i)
                indexes.append(line.index('('))
                v1 = line[indexes[0] + 1:indexes[1] - 1]
                v2 = line[indexes[1] + 1:indexes[2] - 1]
                v3 = line[indexes[2] + 1:indexes[3] - 1]
                v1, v2, v3 = v1.strip(), v2.strip(), v3.strip()
                print(v1, v2, v3)
                avg = (float(v1) + float(v2) + float(v3)) / 3.0
                data.append(avg)
            if "system.ruby.network.packets_injected::total" in line:
                print(line.split())
                data.append(float(line.split()[1]))
            if "system.ruby.network.packets_received::total" in line:
                print(line.split())
                data.append(float(line.split()[1]))
    elif args.synthetic == "triba27_transpose":
        for line in m5_file:
            if "average_flit_latency" in line:
                print(line.split())
                data.append(float(line.split()[1]))
            if "average_flit_network_latency" in line:
                print(line.split())
                data.append(float(line.split()[1]))
            if "average_flit_queueing_latency" in line:
                print(line.split())
                data.append(float(line.split()[1]))
            if "average_flit_vnet_latency" in line:
                print(line.split())
                indexes = []
                for i in range(len(line)):
                    if line[i] == '|':
                        indexes.append(i)
                indexes.append(line.index('('))
                v1 = line[indexes[0] + 1:indexes[1] - 1]
                v2 = line[indexes[1] + 1:indexes[2] - 1]
                v3 = line[indexes[2] + 1:indexes[3] - 1]
                v1, v2, v3 = v1.strip(), v2.strip(), v3.strip()
                print(v1, v2, v3)
                avg = (float(v1) + float(v2) + float(v3)) / 3.0
                data.append(avg)
            if "average_packet_latency" in line:
                print(line.split())
                data.append(float(line.split()[1]))
            if "average_packet_network_latency" in line:
                print(line.split())
                data.append(float(line.split()[1]))
            if "average_packet_queueing_latency" in line:
                print(line.split())
                data.append(float(line.split()[1]))
            if "average_packet_vnet_latency" in line:
                print(line.split())
                print(line.split())
                indexes = []
                for i in range(len(line)):
                    if line[i] == '|':
                        indexes.append(i)
                indexes.append(line.index('('))
                v1 = line[indexes[0] + 1:indexes[1] - 1]
                v2 = line[indexes[1] + 1:indexes[2] - 1]
                v3 = line[indexes[2] + 1:indexes[3] - 1]
                v1, v2, v3 = v1.strip(), v2.strip(), v3.strip()
                print(v1, v2, v3)
                avg = (float(v1) + float(v2) + float(v3)) / 3.0
                data.append(avg)
            if "system.ruby.network.packets_injected::total" in line:
                print(line.split())
                data.append(float(line.split()[1]))
            if "system.ruby.network.packets_received::total" in line:
                print(line.split())
                data.append(float(line.split()[1]))
    elif args.synthetic == "triba27_tornado":
        for line in m5_file:
            if "average_flit_latency" in line:
                print(line.split())
                data.append(float(line.split()[1]))
            if "average_flit_network_latency" in line:
                print(line.split())
                data.append(float(line.split()[1]))
            if "average_flit_queueing_latency" in line:
                print(line.split())
                data.append(float(line.split()[1]))
            if "average_flit_vnet_latency" in line:
                print(line.split())
                indexes = []
                for i in range(len(line)):
                    if line[i] == '|':
                        indexes.append(i)
                indexes.append(line.index('('))
                v1 = line[indexes[0] + 1:indexes[1] - 1]
                v2 = line[indexes[1] + 1:indexes[2] - 1]
                v3 = line[indexes[2] + 1:indexes[3] - 1]
                v1, v2, v3 = v1.strip(), v2.strip(), v3.strip()
                print(v1, v2, v3)
                avg = (float(v1) + float(v2) + float(v3)) / 3.0
                data.append(avg)
            if "average_packet_latency" in line:
                print(line.split())
                data.append(float(line.split()[1]))
            if "average_packet_network_latency" in line:
                print(line.split())
                data.append(float(line.split()[1]))
            if "average_packet_queueing_latency" in line:
                print(line.split())
                data.append(float(line.split()[1]))
            if "average_packet_vnet_latency" in line:
                print(line.split())
                print(line.split())
                indexes = []
                for i in range(len(line)):
                    if line[i] == '|':
                        indexes.append(i)
                indexes.append(line.index('('))
                v1 = line[indexes[0] + 1:indexes[1] - 1]
                v2 = line[indexes[1] + 1:indexes[2] - 1]
                v3 = line[indexes[2] + 1:indexes[3] - 1]
                v1, v2, v3 = v1.strip(), v2.strip(), v3.strip()
                print(v1, v2, v3)
                avg = (float(v1) + float(v2) + float(v3)) / 3.0
                data.append(avg)
            if "system.ruby.network.packets_injected::total" in line:
                print(line.split())
                data.append(float(line.split()[1]))
            if "system.ruby.network.packets_received::total" in line:
                print(line.split())
                data.append(float(line.split()[1]))
    print(data)
    for i in range(2, len(data) - 2):
        data[i] = data[i] / 500
    data.append(data[len(data)-1]/27/(int(args.sim_cycles)/500))
    data.append(data[len(data)-2] / data[len(data)-3])
    print(data)
    print(len(data))
    work_sheet.append(data)
    work_book.save("/home/soliman/m5out_stats/m5out_stats.xlsx")
    m5_file.close()
    print("Done m5out_stats.py")
